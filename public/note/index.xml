<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on lost in economics</title>
    <link>/note/index.xml</link>
    <description>Recent content in Notes on lost in economics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/note/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My Stupid Git Experience</title>
      <link>/note/2017/10/20/my-stupid-git-experience/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/10/20/my-stupid-git-experience/</guid>
      <description>&lt;div id=&#34;disclaimer&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Disclaimer&lt;/h1&gt;
&lt;p&gt;이 문서는 &lt;code&gt;git&lt;/code&gt;을 다루면서 저질렀던 개인적을 실수를 모아 놓은 것이다. 아마도 문서 자체가 조금씩 진화할 것이므로 어떤 시점에서 보신다면 몹시 허접할 수 있도 있겠다. git에 대해서 잘 아는 분들은 패스하시라.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-structure&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Basic structure&lt;/h1&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;img/dr_structure.png&#34; /&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;working dir&lt;/code&gt;: local의 작업디렉토리&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;: staging area. 커밋될 파일들을 올려 두는 공간&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;: 최후의 커밋&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-command&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Basic command&lt;/h1&gt;
&lt;div id=&#34;initiation-in-local&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initiation in local&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;로컬머신에서 git을 개시하는 방법부터 알아보자.&lt;/li&gt;
&lt;li&gt;git으로 관리하고 싶은 directory에서 아래와 같은 명령어를 쳐 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;# YOUR_README_NAME&amp;quot; &amp;gt;&amp;gt; README.md 
git init
git add README.md 
git commit -m &amp;quot;YOUR_COMMIT_MESSAGE/first commit&amp;quot;
git remote add origin &amp;lt;&amp;lt;https://YOUR_REMOTE_GIT_URL&amp;gt;&amp;gt;
git push -u origin master &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;https://YOUR_REMOTE_GIT_URL&amp;gt;&amp;gt;&lt;/code&gt;: 외부 리포가 적절하게 세팅이 되어 있어야 한다. github를 쓴다면, readme 없이 새 repository를 터주는 작업 만으로 끝이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo...&lt;/code&gt;: “# YOUR_README_NAME” 내용을 &lt;code&gt;README.md&lt;/code&gt;로 생성한 후&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;: 해당 디렉토리에 git을 개시한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add&lt;/code&gt;: git의 remote 저장소를 &lt;code&gt;origin&lt;/code&gt;이라는 이름으로 지정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;: &lt;code&gt;-u&lt;/code&gt;는 업스트림 브랜치를 master로 기본설정해준다. 이후 &lt;code&gt;git push&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;은 자동으로 &lt;code&gt;origin &amp;lt;-&amp;gt; master&lt;/code&gt;가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;add-commit-push&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git status  
git add .
#or
git add -u
git commit -m &amp;quot;YOUR_COMMENT&amp;quot;
git push &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;git 운용의 기본적인 흐름 혹은 기본 셋&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;만 명령하면 되는 것은 앞서 &lt;code&gt;git push -u origin master&lt;/code&gt; origin master로 local과 remote repository의 upstream을 정해두었기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;in-depth-command&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;In-depth command&lt;/h1&gt;
&lt;div id=&#34;remote&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;remote&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; git remote  

origin 

&amp;gt; git remote -v 

git status  
git add .
git commit -m &amp;quot;YOUR_COMMENT&amp;quot;
git push &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git remote&lt;/code&gt; : remote로 어떤 대상이 설정되어 있는지 볼 수 있다. &lt;code&gt;git remote -v&lt;/code&gt;: remote의 구체적인 내용을 조회해볼 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pull&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;pull&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pull&lt;/code&gt; 명령어는 기본적으로 &lt;code&gt;fetch&lt;/code&gt;(가져오기)와 &lt;code&gt;merge&lt;/code&gt;(병합하기)를 동시에 구현하는 것이다. 보통 &lt;code&gt;fetch&lt;/code&gt;는 repository의 내용을 가져와 &lt;code&gt;fetch_head&lt;/code&gt;라는 local branch에 임시로 저장해둔다. &lt;code&gt;merge&lt;/code&gt;는 이렇게 가져온 데이터를 원래 흐름과 병합하는 것이다. 이 둘을 동시에 구현하는 것이 &lt;code&gt;pull&lt;/code&gt;이다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;논리적으로 봤을 때, origin과 master에서 모두 변경 사항이 있을 경우는 둘에 충돌이 일어날 수 밖에 없다. 이런 경우 이 충돌을 해결해줘야 &lt;code&gt;push&lt;/code&gt;가 가능하다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;깔끔한 이력 관리를 위해서는 아래와 같이 rebase를 활용해서 pull을 해주면 좋다. rebase를 해주면 별도의 브랜치를 만들지 않겠다는 의도를 분명히 하는 것이고, 이에 따라서 log가 깔끔하고 단순해진다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; git pull --rebase&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;commit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;commit&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git commit --amend --no-edit&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--amend --no-edit&lt;/code&gt;: 전에 commit message를 그대로 쓰고 commit한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;branch&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;branch&lt;/code&gt;&lt;/h1&gt;
&lt;div id=&#34;basic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git branch &amp;lt;BRANCH_NAME&amp;gt;
git checkout
git checkout -b &amp;lt;BRANCH_NAME&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;: 브랜치를 조회하거나, &lt;code&gt;&amp;lt;BRANCH_NAME&amp;gt;&lt;/code&gt;을 붙여 브랜치를 생성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkout&lt;/code&gt;이란 다른 브랜치로 빠져나가는 것을 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: 브랜치를 만들면서 체크아웃을 하기 위해서는 이 옵션을 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git merge &amp;lt;COMMIT_NAME&amp;gt; 
git branch -d &amp;lt;BRANCH_NAME&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;: 커밋된 다른 지점과 현재 브랜치를 병합한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 브랜치를 삭제하기 위해서 사용하는 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;conflict&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;conflict&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;images/conflict.png&#34; /&gt;

&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git merge issue3&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이때 어떤 파일에 대해서 master의 내용과 issue의 내용이 서로 다른 부분이 있다고 하자.&lt;/li&gt;
&lt;li&gt;병합이 무리 없이 가능하다면 그대로 병합한다. 즉, A와 B가 있을 떄 B가 A의 내용을 포함하고 있다면, 병합이 가능하다.&lt;/li&gt;
&lt;li&gt;파일 자체가 다른 경우는 인간의 판단이 필요하다. 해당 파일을 열면 아래와 같이 표현되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;원숭이도 이해할 수 있는 Git 명령어
add: 변경 사항을 만들어서 인덱스에 등록해보기
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
commit: 인덱스의 상태를 기록하기
=======
pull: 원격 저장소의 내용을 가져오기
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; issue3&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code&gt;는 &lt;code&gt;====&lt;/code&gt;까지 HEAD의 부분이고, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; issue3&lt;/code&gt;의 부분이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rebase&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;rebase&lt;/code&gt;&lt;/h1&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;개념&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;특정한 브랜치를 다른 브랜치로 합친 후에 이전 브랜치는 없애고 싶을 때, 한번에 처리하는 명령어가 rebase다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;images/rebase_1.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;원래 상태는 HEAD를 master로 하고 브랜치는 다음과 같이 3가지다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout issue3
git rebase master &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;issue3로 체크아웃을 한 뒤에 해당 브랜치를 master로 rebase한다. 만일 두 노드 사이에 충돌이 없다면 rebase가 되곘지만, 충돌이 있을 경우에는 해당 파일을 수정해줘야 한다. 수정 후 아래와 같이 rebase한다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;images/rebase_2.png&#34; /&gt;

&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;git add myfile.txt 
git rebase --continue &lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;images/rebase_3.png&#34; /&gt;

&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;git checkout master 
git merge issue3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt;로 체크아웃한 이후에 issue3 merge하면 아래와 같이 가지가 정리된다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;images/rebase_4.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;branch-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;branch&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://backlog.com/git-tutorial/kr/stepup/stepup2_1.html&#34; class=&#34;uri&#34;&gt;https://backlog.com/git-tutorial/kr/stepup/stepup2_1.html&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;case-by-case&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Case by case&lt;/h1&gt;
&lt;div id=&#34;github---local---&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Github의 내용을 강제로 local로 덮어쓰고 싶을 때&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;그냥 지우고 다시 clone을 할 수도 있다. 혹은&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git fetch --all
git reset --hard origin/master
git pull origin master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;local----github---&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;local에 있는 내용을 강제로 github으로 보내고 싶을 때&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git pull --rebase
git push
git stash pop&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;miscellaneous&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Miscellaneous&lt;/h1&gt;
&lt;div id=&#34;gitignore&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vim으로 만들 수도 있다. 물론, txt editor로 만들어도 무방하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;vim .gitignore &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;vim 화면 위쪽에 입력하려면 i(insert)를 치고, 제외할 타잎을 넣는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;*.Rhistory 
*.RData &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ESC를 치면 화면 아래 command 창으로 이동한다. :qw(quit &amp;amp; write)를 입력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;homework&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Homework&lt;/h1&gt;
&lt;div id=&#34;log&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;log&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0&#34;&gt;링크&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-link&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other link&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://meetup.toast.com/posts/116&#34; class=&#34;uri&#34;&gt;http://meetup.toast.com/posts/116&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>All dots are not created same...</title>
      <link>/note/2017/10/18/all-dots-are-not-created-same.../</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/10/18/all-dots-are-not-created-same.../</guid>
      <description>&lt;div id=&#34;cdots-ldots-and-so-on&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;\cdots&lt;/code&gt;, &lt;code&gt;\ldots&lt;/code&gt;, and so on&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\mathrm \LaTeX\)&lt;/span&gt;으로 조판하는 분들에게는 때때로 아리송한 사항들이 몇 개 있다. 작정하고 알아보기에는 사소하고 그렇다고 넘어가기엔 찜찜한, 뭐 그런 것들이다. 요즘은 무늬나마 공부하는 사람일 때 만큼 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm \LaTeX\)&lt;/span&gt;을 쓰지 않는다. 그래도 가끔 쓰기는 해서일까? 이런 사소한 내용에 더 큰 궁금증을 느낄 때가 많다.&lt;/p&gt;
&lt;p&gt;문득, &lt;code&gt;\cdots&lt;/code&gt;(&lt;span class=&#34;math inline&#34;&gt;\(\cdots\)&lt;/span&gt;)과 &lt;code&gt;\ldots&lt;/code&gt;(&lt;span class=&#34;math inline&#34;&gt;\(\ldots\)&lt;/span&gt;)은 어떻게 다르지, 라는 질문이 떠올랐다. 분명, 수학 기호의 일부이기 때문에 다르기는 다를텐데 말이다. 천조국수학회(AMS)에서 관리하는 수학 조판 패키지인 &lt;code&gt;amsmath&lt;/code&gt; 패키지의 &lt;a href=&#34;http://www.tug.org/teTeX/tetex-texmfdist/doc/latex/amsmath/amsldoc.pdf&#34;&gt;이용자 매뉴얼&lt;/a&gt;에 따르면 ’점 세개’로 표기되는 기호들은 명령어 차원에서 구분된다. 즉, 외견상 같은 모양을 하고 있더라도 구분해서 쓰라는 취지인 셈이다. AMS 패키지 매뉴얼은 현재 2.0이 최신 버전이고 만들어진 날짜는 2002년 2월 25일이다… (그간 이 매뉴얼을 꼼꼼하게 볼 생각을 하지 않았다니 ㅠㅠ)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;according-to-ams-package-guide&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;According to AMS package guide&lt;/h1&gt;
&lt;p&gt;가이드 12쪽에 보면 ’점 세개’는 아래와 같이 다섯가지로 구분되어 있다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;\dotsc&lt;/code&gt; for “dots with commas”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotsb&lt;/code&gt; for “dots with binary operators / relations”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotsm&lt;/code&gt; for “multiplication dots”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotsi&lt;/code&gt; for “dots with integrals”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotso&lt;/code&gt; for “other dots” (none of the above)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AMS 구분을 보고 무릎을 ‘탁’ 쳤다. 바로 이거야!&lt;/p&gt;
&lt;p&gt;직접 조판해보자.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;\dotsc&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(A_1, A_2, \dotsc\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotsb&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(A_1 + A_2 + \dotsb\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotsm&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(A_1 A_2 \dotsm\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\dotsi&lt;/code&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\begin{aligned}  \int_{A_1} \int_{A_2} \dotsi  \end{aligned}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;뭐 다 비슷비슷해 보일 수 있으나, 참으로 감동이 아닌가!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Talk</title>
      <link>/note/2017/09/19/data-talk/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/09/19/data-talk/</guid>
      <description>&lt;div id=&#34;prologue&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;개인적이든 직업적인 이유든 데이터를 볼 일이 많습니다. 인상적으로 본 데이터를 소개하는 꼭지를 한번 만들어 봅니다. 제가 여기저기서 본 것들을 가져옵니다. 독창성 같은 건 기대하지 마시기를… 아울러 업데이트도 기분 내킬 때!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alchol-vs-suicide&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Alchol vs Suicide&lt;/h1&gt;
&lt;p&gt;인과관계는 아니니까, 그렇구나 하고 말지요.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://i.redd.it/15ps6g0lupmz.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;how-death-has-changed-over-100-years-in-britain&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How death has changed over 100 years in Britain&lt;/h1&gt;
&lt;p&gt;엄청난 비주얼라이제이션입니다. 일종의 동영상이라고 할 수 있을텐데, 공중보건의 주요한 사건과 죽음의 양상을 잘 이야기해주고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.theguardian.com/lifeandstyle/ng-interactive/2017/sep/18/how-death-has-changed-over-100-years-in-britain&#34;&gt;Guardian&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;years-of-economic-history-in-one-chart&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2,000 Years of Economic History in One Chart&lt;/h1&gt;
&lt;p&gt;혹자의 이야기처럼, 중국은 “열강”이 아닌 적이 별로 없었던 나라입니다. 요즘이 정상으로 돌아오고 있는 국면일 수도 있겠지요.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://2oqz471sa19h3vbwa53m33yj.wpengine.netdna-cdn.com/wp-content/uploads/2017/09/share-of-gdp-history1070.jpg&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://www.visualcapitalist.com/2000-years-economic-history-one-chart&#34;&gt;Visual Capitalist&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;google-public-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Google Public Data&lt;/h1&gt;
&lt;p&gt;아직은 World Bank 데이터 밖에 없는 것 같습니다만, 구글이 하는 일이니 소리소문 없이 좋아지리라 생각합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/publicdata/explore?ds=d5bncppjof8f9_&amp;amp;met_y=sp_pop_totl&amp;amp;hl=en&amp;amp;dl=en&#34;&gt;Google Public Data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;baltimore-neighborhood-health&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Baltimore Neighborhood Health&lt;/h1&gt;
&lt;p&gt;훌륭합니다! 제가 볼티모어 거주자가 아니라서 보는 감상의 깊이가 다릅니다. 한국 도시들도 이런 거 만들어주세요!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://data.baltimoresun.com/news/neighborhood-health/&#34;&gt;Baltimore Sun&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rise-of-streaming&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rise of Streaming&lt;/h1&gt;
&lt;p&gt;올해 에미상에서 “Handmaid’s Tale”의 작품상 수상이 화제입니다. 에미 후보작들의 변화는 가정용 엔터테인먼트의 변화를 잘 보여줍니다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://i.redd.it/8fu135v7comz.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Another Note on A blogdown Tutorial</title>
      <link>/note/2017/06/14/another-note/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/06/14/another-note/</guid>
      <description>&lt;p&gt;I just discovered &lt;a href=&#34;https://apreshill.rbind.io/post/up-and-running-with-blogdown/&#34;&gt;an awesome tutorial&lt;/a&gt; on &lt;strong&gt;blogdown&lt;/strong&gt; written by Alison. I have to admit this is &lt;em&gt;the&lt;/em&gt; best &lt;strong&gt;blogdown&lt;/strong&gt; tutorial I have seen so far.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://apreshill.rbind.io/img/posts/2017-06-12-up-and-running-with-blogdown/blogdown-signpost-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Quick Note on Two Beautiful Websites</title>
      <link>/note/2017/06/13/a-quick-note/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/06/13/a-quick-note/</guid>
      <description>&lt;p&gt;To me, the two most impressive websites based on &lt;strong&gt;blogdown&lt;/strong&gt; are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://robjhyndman.com&#34;&gt;Rob J Hyndman&lt;/a&gt;&amp;rsquo;s personal website.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://livefreeordichotomize.com&#34;&gt;Live Free or Dichotomize&lt;/a&gt; by Lucy and Nick &lt;em&gt;et al&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m sure there will be more.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>