<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r on lost in economics</title>
    <link>/categories/r/index.xml</link>
    <description>Recent content in r on lost in economics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sf package with ggplot2</title>
      <link>/post/2017/11/03/sf-package-with-ggplot2/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/11/03/sf-package-with-ggplot2/</guid>
      <description>&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;일반인이 지도로 할 수 있는 가장 쉬운 시각화는? 누구나 한번은 봤음직 한 단계구분도(cholopleth map)다. 이 작업을 직접 하기 위해 필요한 요소들부터 따져보자.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;지도를 그리기 위한 공간 데이터&lt;/li&gt;
&lt;li&gt;단계로 표현될 변수 (투표율, 소득 등등)&lt;/li&gt;
&lt;li&gt;1,2를 연결할 방법&lt;/li&gt;
&lt;li&gt;1,2를 지도로 구현할 방법&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;상당히 직관적인 까닭에 단계구분도는 많이 활용된다. 하지막 막상 단계구분도를 생성하고자 할 때 작업이 그리 간단하지 않다. R로 이 작업을 어떻게 수행할 수 있을까? 단계구분도를 생성하는 것 자체가 그리 난이도가 높은 작업은 아니다. 오픈소스툴 답게 몇 가지 서로 다른 방법들이 R에 존재한다. 다만 이 작업을 일관되게, 즉 tidyverse의 틀 내에서 할 수 없을까?&lt;/p&gt;
&lt;p&gt;한 가지 다른 문제도 있다. 사실 ggplot2에서 지도 데이터의 시각화가 생각 만큼 쉽게 구현되지는 않는다. 이는 대체로 지도 데이터를 구현하는 R 패키지의 데이터 표현 양식에서 비롯된다. 하지만 뜻이 있는 곳에 길이 있다고 하지 않는가!&lt;/p&gt;
&lt;p&gt;이제 소개할 &lt;code&gt;sf&lt;/code&gt;패키지가 이러한 문제점을 해소하기 위해서 제작되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sf-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;sf&lt;/code&gt; package&lt;/h1&gt;
&lt;p&gt;sf는 ’simple feature’를 뜻한다. ’simple feature’는 실세계(real world)의 대상을 컴퓨터를 통해 어떻게 표현할지에 관한 표준이라고 한다.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; 자세한 내용을 적어봐야 밑지는 장사이니 이쯤에서 접어 두자. 문서의 설명에 따르면, R에서도 활용하는 공간 데이터베이스 및 라이브러리 그리고 표준이 대부분 sf와 호환되어 잘 작동한다. 단계구분도를 R을 통해 그려본 사람들은 알겠지만, 단계구분도 그리기 위해서는 방법에 따라 &lt;code&gt;sp&lt;/code&gt;, &lt;code&gt;rgdal&lt;/code&gt;, &lt;code&gt;rgeos&lt;/code&gt; 등의 패키지를 제각각 불러와야 하는 경우가 많다. &lt;code&gt;sf&lt;/code&gt;패키지를 쓰면 그럴 필요가 없다는 이야기다.&lt;a href=&#34;#fn2&#34; class=&#34;footnoteRef&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;code&gt;sf&lt;/code&gt; 패키지로 할 수 있는 일이야 훨씬 많겠으나 단계구분도를 위해서 알아야 하는 건 몇 개 안된다. 글 앞에서 지적했던 네 가지 요소를 다시 챙겨보자.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;지도 공간 데이터 (예를 들어, shp 파일)&lt;/li&gt;
&lt;li&gt;단계로 표현할 변수&lt;/li&gt;
&lt;li&gt;How?&lt;/li&gt;
&lt;li&gt;How?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;보통 R에서 shp 파일을 &lt;code&gt;sp&lt;/code&gt; 패키지를 통해 읽으면 꽤 복잡한 포맷으로 R에 기록된다. 데이터를 이해하고 필요한 것을 추출하기 위해서 한참 들여다 봐야 한다. 1, 2를 연결하기 위해서는 지도 공간 데이터를 R의 데이터프레임으로 풀어야 한다. &lt;code&gt;fortify&lt;/code&gt;라는 ggplot2의 함수를 써서 shp 파일의 데이터들을 data.frame으로 풀어낼 수 있다.&lt;a href=&#34;#fn3&#34; class=&#34;footnoteRef&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; 하지만, 몇 가지 문제가 있다. 우선, &lt;code&gt;fortify&lt;/code&gt; 함수가 그리 직관적이지 않다. 쓰고도 뭔가 찜찜함이 남는 달까. &lt;code&gt;sf&lt;/code&gt; 패키지는 shp 파일의 지도 관련 데이터를 바로 data.frame으로 풀어준다. 이것만으로도 큰 도약이다.&lt;/p&gt;
&lt;p&gt;이제 이렇게 지도 데이터가 data.frame으로 풀리면 3번이 자연스럽게 해소된다. 필요한 변수를 수집해서 &lt;code&gt;left_join&lt;/code&gt; 같은 명령어로 여기에 붙여주면 그만이다.&lt;/p&gt;
&lt;p&gt;남은 것은 시각화인데, 편리하게도, &lt;code&gt;ggplot2&lt;/code&gt;의 베타버전에서 &lt;code&gt;geom_sf&lt;/code&gt;라는 문법을 통해서 sf 정보를 담고 있는 data.frame을 지도로 바로 쏴준다. 어이 없을 만큼 편리하다! 게다가 &lt;code&gt;ggplot2&lt;/code&gt;을 쓰는 만큼 손쉬운 커스터마이제이션이 가능하다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-super-simple-example&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A super simple example&lt;/h1&gt;
&lt;p&gt;개념이야 아무리 떠들어봐야 소용없다. 보통 천조국 지도는 (서럽게도?) 패키지 안에 들어 있으니, 우리는 패키지에 포함되어 있지 않은 헬조선 지도로 몹시 간단한 사례를 하나 만들어 보자.&lt;/p&gt;
&lt;div id=&#34;shp--&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;shp 파일 구하기&lt;/h2&gt;
&lt;p&gt;고맙게도 shp 파일로 가지런히 만들어진 행정구역 파일을 &lt;a href=&#34;http://www.gisdeveloper.co.kr/?p=2332&#34;&gt;여기&lt;/a&gt;에서 구할 수 있다. 시도, 읍면동, 리까지 구할 수 있으니, 헬조선의 단계구분도를 그리는 데 크게 부족함은 없을 것이다. 일단 다운받아서 압축을 푼다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sf-&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;sf&lt;/code&gt; 패키지&lt;/h2&gt;
&lt;p&gt;필요한 패키지부터 설치/로딩하자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;#39;sf&amp;#39;)
#install.packages(&amp;#39;tidyverse&amp;#39;, dependencies = T)
#devtools::install_github(&amp;quot;tidyverse/ggplot2&amp;quot;)
library(&amp;#39;sf&amp;#39;)
library(&amp;#39;tidyverse&amp;#39;)
library(&amp;#39;ggplot2&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;최초 인스톨할 때 위의 주석(&lt;code&gt;#&lt;/code&gt;)은 빼고 돌려야 한다. 이미 인스톨되어 있다면 주석을 그대로 살려두면 된다.&lt;/p&gt;
&lt;p&gt;다른 명령어들은 평범하지만, ggplot2의 경우 &lt;code&gt;geom_sf&lt;/code&gt;를 이용하기 위해서는 베타 버전을 인스톨해야 한다. 이미 인스톨되어 있더라도 그냥 &lt;code&gt;devtools&lt;/code&gt;를 써서 한번 더 인스톨 해주자. 어쨌든, 중요한 것은 잘 인스톨하고 잘 불러들이는 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;st_read(&amp;quot;YOUR_LOCATION/YOUR_SHPFILE.shp&amp;quot;) -&amp;gt; tdf &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;st_read&lt;/code&gt;는 적절한 위치(YOUR_LOCATION)에 있는 공간 파일(YOUR_SHPFILE.shp)을 로딩하기 위한 명령어다. 앞서 다운로드한 파일에서 읍면동에 해당하는 &lt;code&gt;TL_SCCO_EMD.shp&lt;/code&gt;파일을 로딩해 tdf라는 embedded data.frame를 생성했다. 이 data.frame의 컬럼은 4개다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Observations: 5,039
Variables: 4
$ EMD_CD     &amp;lt;fctr&amp;gt; 11110101, 11110102, 11110103, 11110104, 11110105, 11110106, 1...
$ EMD_ENG_NM &amp;lt;fctr&amp;gt; Cheongun-dong, Singyo-dong, Gungjeong-dong, Hyoja-dong, Chang...
$ EMD_KOR_NM &amp;lt;fctr&amp;gt; u&amp;lt;U+00BF&amp;gt;&amp;lt;U+ED7F&amp;gt;, &amp;lt;U+00BD&amp;gt;&amp;lt;U+0171&amp;gt;&amp;lt;U+00B3&amp;gt;&amp;lt;U+00B5&amp;gt;&amp;lt;U+00BF&amp;gt;, ...
$ geometry   &amp;lt;simple_feature&amp;gt; MULTIPOLYGON (((953700.0221..., MULTIPOLYGON (((953...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;EMD_CD&lt;/code&gt;는 읍면동의 코드, &lt;code&gt;EMD_ENG_NM&lt;/code&gt;은 영문 이름, 그리고 &lt;code&gt;EMD_KOR_NM&lt;/code&gt;은 한글 이름이다. 마지막으로 &lt;code&gt;geometry&lt;/code&gt;는 simple feature로 해당 행정구역의 지도 모양을 (복잡한) 멀티폴리곤 데이터로 담고 있다. 이 녀석이 지도를 그릴 때 활용된다. data.frame의 용량이 커지는 것도 이 녀석 때문이다.&lt;/p&gt;
&lt;p&gt;tdf 객체는 data.frame다. 데이터를 조작할 필요가 있으면 이 녀석 위에서 하면 된다. 위의 파일은 윈도에서 불러온 것인데, (언제나 그렇듯이 빌어먹을 마소의 고집 때문에 고통받는 헬조선 사람들의 고질적인 문제!) 인코딩 때문에 위에 보는 것처럼 한글 이름이 &lt;code&gt;&amp;lt;U+00BF&amp;gt;&lt;/code&gt;와 같이 바이트 코드로 노출되어 있다. 이걸 고쳐보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tdf %&amp;gt;% 
  as.tibble %&amp;gt;%
  mutate( 
    EMD_CD = as.character(EMD_CD), 
    EMD_ENG_NM = as.character(EMD_ENG_NM),
    EMD_KOR_NM = iconv(EMD_KOR_NM, localeToCharset(), &amp;quot;UTF-8&amp;quot;)
  ) -&amp;gt; tdf_EMD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;tdf_EMD&lt;/code&gt;를 살펴보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Classes ‘tbl_df’, ‘tbl’ and &amp;#39;data.frame&amp;#39;:   5039 obs. of  4 variables:
 $ EMD_CD    : chr  &amp;quot;11110101&amp;quot; &amp;quot;11110102&amp;quot; &amp;quot;11110103&amp;quot; &amp;quot;11110104&amp;quot; ...
 $ EMD_ENG_NM: chr  &amp;quot;Cheongun-dong&amp;quot; &amp;quot;Singyo-dong&amp;quot; &amp;quot;Gungjeong-dong&amp;quot; &amp;quot;Hyoja-dong&amp;quot; ...
 $ EMD_KOR_NM: chr  &amp;quot;청운동&amp;quot; &amp;quot;신교동&amp;quot; &amp;quot;궁정동&amp;quot; &amp;quot;효자동&amp;quot; ...
 $ geometry  :sfc_MULTIPOLYGON of length 5039; first list element: List of 1
  ..$ :List of 1
  .. ..$ : num [1:377, 1:2] 953700 953694 953691 953690 953688 ...
  ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;XY&amp;quot; &amp;quot;MULTIPOLYGON&amp;quot; &amp;quot;sfg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;마지막으로 단계구분도가 구현될 가상의 변수 하나를 만들어 관찰에 하나씩 붙여 보자. 헬조선 전체를 구현하기에는 용량이 좀 크다. 편의상 서울만 필터링하도록 하겠다. 지도 코드에서 앞 두자리가 &lt;span class=&#34;math inline&#34;&gt;\(11\)&lt;/span&gt;로 시작하는 것이 서울이다. 물론, 실제 구현에서는 그리고 싶은 지역에 구현하고 싶은 데이터를 구해서 이런 저런 추가 작업 후에 붙이면 되겠다. 여기서는 uniform 랜덤을 생성해서 몹시 성의 없이 갖다 붙였다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tdf_EMD %&amp;gt;% 
  filter(substr(EMD_CD, start = 1, stop = 2) == &amp;quot;11&amp;quot;) %&amp;gt;% 
  mutate(index_rnd = runif(n())) -&amp;gt; tdf_seoul &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-with-ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;visualization with ggplot2&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(tdf_seoul) + 
  geom_sf(aes(fill = index_rnd))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-11-03-sf_ggplot2_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;너무나 간단하지 않은가! 이후에는 취향에 맞게 ggplot2의 문법을 따라서 컬러, 라벨링, 경계선 두께 등을 조정하면 된다. Voila!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reference&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://strimas.com/r/tidy-sf/&#34; class=&#34;uri&#34;&gt;http://strimas.com/r/tidy-sf/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;자세한 내용은 &lt;a href=&#34;https://en.wikipedia.org/wiki/Simple_Features&#34;&gt;여기&lt;/a&gt;를 참고하라.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;자세한 내용은 &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/vignettes/sf1.html&#34;&gt;여기&lt;/a&gt;를 참고하라.&lt;a href=&#34;#fnref2&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.rdocumentation.org/packages/ggplot2/versions/2.2.1/topics/fortify&#34;&gt;여기&lt;/a&gt;를 보면 &lt;code&gt;fortify&lt;/code&gt;는 곧 사라질 명령어이며 &lt;code&gt;broom&lt;/code&gt; 패키지를 대신 쓸 것을 권하고 있다.&lt;a href=&#34;#fnref3&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Adding bigfoot.js to Hugo</title>
      <link>/note/2017/11/01/adding-bigfoot.js-to-hugo/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/11/01/adding-bigfoot.js-to-hugo/</guid>
      <description>&lt;div id=&#34;bigfoot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;BIGFOOT!&lt;/h1&gt;
&lt;p&gt;웹서핑을 하다가 이 녀석을 보고야 말았다, &lt;a href=&#34;http://bigfootjs.com/&#34;&gt;bigfoot.js&lt;/a&gt;. 웹 문서가 고도화된 지금 인터넷으로 노출하는 문서에서 표현의 방법으로 답답함을 느끼는 일은 거의 없을 터다. 표, 수식, 그림 등을 동원해 소통할 때 pdf 등의 프린트 기반 문서들과 비교해 보다 기발하고 뛰어난 사례들도 많다. 당장 이 문서가 작성되고 있는 markdown이 그 대표 사례다.&lt;/p&gt;
&lt;p&gt;어쨌든 왠만한 것들이 쉽게 된다는 걸 알게 되면, 작은 차이들이 눈에 들어오기 마련이다. 각주 처리만 좀 더 ‘멋지게’ 되면 좋겠는데, 싶었다. 마치 등이 살짝 가려운 데 긁지 못하는 격이랄까. 이때 &lt;code&gt;bigfoot.js&lt;/code&gt;를 보게된 것이다! 각주를 누르면 버블로 해당 텍스트가 그 자리에 등장한다. 이거야말로 인터랙티브 문서가 지닌 장점이 아닌가!&lt;/p&gt;
&lt;p&gt;그래서 바로 검색 들어 갔다. 우선, 필요한 요소를 챙겨보자.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;bigfoot.js&lt;/code&gt;를 구현하는 자바 스크립트&lt;/li&gt;
&lt;li&gt;해당 자바스크립트를 이 공간이 사용하고 있는 Hugo framework에 배치하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 두가지만 얼추 해결되면 될 듯 싶었다. 어제 밤에 딱 10분 검색해서 찾아냈다.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-installsource&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to install&lt;a href=&#34;#fn2&#34; class=&#34;footnoteRef&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;원래 &lt;code&gt;bigfoot.js&lt;/code&gt;는 ’점 세개’가 나오는 형태여서 숫자로 표기되는 전통적인 각주와는 어울리지 않는다. &lt;code&gt;bigfoot.js&lt;/code&gt;는 보다 간략한 형태의 &lt;code&gt;barefoot.min.js&lt;/code&gt;도 제공한다. 이 녀석을 붙여보기로 하자.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/philgruneich/barefoot&#34;&gt;barefoot github&lt;/a&gt;에서 &lt;code&gt;barefoot.min.js&lt;/code&gt;, &lt;code&gt;barefoot.min.css&lt;/code&gt;를 다운 받는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;barefoot.min.js&lt;/code&gt;을 &lt;code&gt;static/js&lt;/code&gt;에 넣어준다. 혹시 &lt;code&gt;static&lt;/code&gt; 디렉토리 안에 &lt;code&gt;js&lt;/code&gt;가 없다면 만들면 된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;barefoot.min.css&lt;/code&gt;을 &lt;code&gt;static/css&lt;/code&gt;에 넣어준다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes/[YOUR_THEME_NAME]/layouts/partials/footer.html&lt;/code&gt;을 열어서 아래 코드를 적절한 위치에 삽입한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/barefoot.min.css&amp;quot;&amp;gt;

&amp;lt;script src=&amp;quot;/js/barefoot.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  lf = new BareFoot();
  lf.init();
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-use&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to use&lt;/h1&gt;
&lt;p&gt;그냥 markdown에 각주 쓰듯이 쓰면 되겠다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is barefoot![^baref]

[^baref]: 이것은 베어풋으로 붙인 각주입니다! &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is barefoot!&lt;a href=&#34;#fn3&#34; class=&#34;footnoteRef&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;부끄럽지만 몹시 뿌듯하고 기뻤다! ㅎ&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;이 내용의 출처는 &lt;a href=&#34;http://egeiro.net/post/barefoot-notes/&#34;&gt;여기&lt;/a&gt;다.&lt;a href=&#34;#fnref2&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;이것은 베어풋으로 붙인 각주입니다!&lt;a href=&#34;#fnref3&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Regression Modelling with Tidyverse</title>
      <link>/post/2017/10/30/regression-modelling-with-tidyverse/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/10/30/regression-modelling-with-tidyverse/</guid>
      <description>&lt;p&gt;&lt;code&gt;tidyverse&lt;/code&gt;로 묶인 패키지 군에 대한 찬미는 뭐 이제… 이번 포스팅에서는 &lt;code&gt;modelr&lt;/code&gt;, &lt;code&gt;broom&lt;/code&gt;, &lt;code&gt;purrr&lt;/code&gt;을 통해서 ‘유연하게’(MB말투로는 “스마아~트하게”) 회귀분석하는 방법을 간략하게 끄적이겠다.&lt;/p&gt;
&lt;div id=&#34;unconventional-data.frame&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Unconventional &lt;code&gt;data.frame&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;data.frame에는 데이터만 들어갈 수 있을까? 아니다! data.frame을 엑셀 시트처럼만 생각하면 data.frame에게 송구할 일이다. data.frame 안에는 마트로쉬카 인형처럼 또다른 data.frame을 넣을 수 있다. H. Wickham은 이를 “nested data.frame”이라고 부른다.&lt;/p&gt;
&lt;p&gt;data.frame 뿐일까! 사실 R의 다른 객체들도 셀 안에 넣을 수 있다. 이 장점을 살리면, 필요한 데이터에 대한 필요한 모델을 유연하게 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;일단, 필요한 라이브러리를 불러오자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(modelr)
library(broom)
library(gapminder)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;편의상 네이티브 data.frame 대신 tidyverse의 data.frame 대체물인 &lt;code&gt;tibble&lt;/code&gt;을 쓰도록 하겠다. 여기서 활용할 &lt;code&gt;gapminder&lt;/code&gt; 데이터 셋은 각국의 기대 수명과 각종 변수들을 담고 있다. 데이터 셋의 대략적인 생김새는 아래와 같다. 각각의 컬럼은 국가, 대륙, 년도, 기대 수명, 인구, 그리고 1인당 GDP를 나타낸다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(gapminder) 
gapminder&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,704 x 6
##        country continent  year lifeExp      pop gdpPercap
##         &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Afghanistan      Asia  1952  28.801  8425333  779.4453
##  2 Afghanistan      Asia  1957  30.332  9240934  820.8530
##  3 Afghanistan      Asia  1962  31.997 10267083  853.1007
##  4 Afghanistan      Asia  1967  34.020 11537966  836.1971
##  5 Afghanistan      Asia  1972  36.088 13079460  739.9811
##  6 Afghanistan      Asia  1977  38.438 14880372  786.1134
##  7 Afghanistan      Asia  1982  39.854 12881816  978.0114
##  8 Afghanistan      Asia  1987  40.822 13867957  852.3959
##  9 Afghanistan      Asia  1992  41.674 16317921  649.3414
## 10 Afghanistan      Asia  1997  41.763 22227415  635.3414
## # ... with 1,694 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 모델링 작업 들어간다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tribble(~funcs,  ~models,       ~dat,
        glm,    &amp;quot;lifeExp ~ gdpPercap&amp;quot;,   gapminder,
        glm,    &amp;quot;log(lifeExp) ~ log(gdpPercap)&amp;quot;,   gapminder,
        lm,     &amp;quot;log(lifeExp) ~ log(gdpPercap)&amp;quot;,   filter(gapminder, continent == &amp;quot;Asia&amp;quot;), 
        lm,     &amp;quot;log(lifeExp) ~ log(gdpPercap)&amp;quot;,   filter(gapminder, continent == &amp;quot;Africa&amp;quot;),
        lm,     &amp;quot;log(lifeExp) ~ continent + log(gdpPercap)&amp;quot;,   gapminder
) -&amp;gt; my_model_gapminder

my_model_gapminder&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##    funcs                                    models                  dat
##   &amp;lt;list&amp;gt;                                     &amp;lt;chr&amp;gt;               &amp;lt;list&amp;gt;
## 1  &amp;lt;fun&amp;gt;                       lifeExp ~ gdpPercap &amp;lt;tibble [1,704 x 6]&amp;gt;
## 2  &amp;lt;fun&amp;gt;             log(lifeExp) ~ log(gdpPercap) &amp;lt;tibble [1,704 x 6]&amp;gt;
## 3  &amp;lt;fun&amp;gt;             log(lifeExp) ~ log(gdpPercap)   &amp;lt;tibble [396 x 6]&amp;gt;
## 4  &amp;lt;fun&amp;gt;             log(lifeExp) ~ log(gdpPercap)   &amp;lt;tibble [624 x 6]&amp;gt;
## 5  &amp;lt;fun&amp;gt; log(lifeExp) ~ continent + log(gdpPercap) &amp;lt;tibble [1,704 x 6]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;my_model_gapminder&lt;/code&gt;는 어떤 형태의 tibble일까? 먼저 &lt;code&gt;funcs&lt;/code&gt; 컬럼은 돌릴 (회귀)분석 방법이 담겨 있다. 쿼테이션 마크가 없음에 유의하자. 스트링이 아니라는 이야기다. &lt;code&gt;glm&lt;/code&gt;, &lt;code&gt;lm&lt;/code&gt; 등의 함수가 바로 들어가 있다. &lt;code&gt;models&lt;/code&gt; 칼럼은 분석 모형을 담고 있다. 마지막으로 dat는 해당 모델의 추정에 사용될 데이터셋을 의미한다. 보시면, 3, 4 모델에서는 각기 “Asia”와 “Africa” 대륙만 필터링한 데이터를 추정에 활용했음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이런 형태가 왜 좋을까? &lt;code&gt;my_model_gapminder&lt;/code&gt;을 들여다보고 있으면 대충 감이 온다. 행 단위로 보면, funcs의 (회귀)분석 방법을 사용하되, arguments로 각각 models와 dat를 넣겠다는 의도다. 이 일만 구현해주면 된다. 즉, &lt;code&gt;my_model_gapminder&lt;/code&gt;은 일종의 modelling set인 셈이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;modelr&lt;/code&gt;패키지의 함수 &lt;code&gt;fit_with&lt;/code&gt;를 쓰면 이 작업을 간단하게 구현할 수 있다. &lt;code&gt;fit_with&lt;/code&gt;는 input arguments로 (분석) 함수, 모델, 그리고 데이터를 받는다. 위에서 만든 &lt;code&gt;my_model_gapminder&lt;/code&gt;의 매 열이 &lt;code&gt;fit_with&lt;/code&gt;의 arguments로 들어간다. 이렇게 3개 이상의 input이 있을 경우 &lt;code&gt;purrr&lt;/code&gt; 패키지의 &lt;code&gt;pmap&lt;/code&gt; 함수를 쓰면 된다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_model_gapminder %&amp;gt;% 
  mutate(fit = flatten(pmap(.l = list(.f = funcs, .formulas = models, data = dat), 
                            .f = modelr::fit_with)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 4
##    funcs                                    models                  dat
##   &amp;lt;list&amp;gt;                                     &amp;lt;chr&amp;gt;               &amp;lt;list&amp;gt;
## 1  &amp;lt;fun&amp;gt;                       lifeExp ~ gdpPercap &amp;lt;tibble [1,704 x 6]&amp;gt;
## 2  &amp;lt;fun&amp;gt;             log(lifeExp) ~ log(gdpPercap) &amp;lt;tibble [1,704 x 6]&amp;gt;
## 3  &amp;lt;fun&amp;gt;             log(lifeExp) ~ log(gdpPercap)   &amp;lt;tibble [396 x 6]&amp;gt;
## 4  &amp;lt;fun&amp;gt;             log(lifeExp) ~ log(gdpPercap)   &amp;lt;tibble [624 x 6]&amp;gt;
## 5  &amp;lt;fun&amp;gt; log(lifeExp) ~ continent + log(gdpPercap) &amp;lt;tibble [1,704 x 6]&amp;gt;
## # ... with 1 more variables: fit &amp;lt;list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;앞서 만든 &lt;code&gt;my_model_gapminder&lt;/code&gt;에 fit이라는 컬럼을 새로 붙였다. fit 안에는 회귀분석의 결과물이 통채로 담기게 된다. 이렇게 해두면 해당 결과물을 꺼내 예측을 하는 데 쓰거나 그림을 그리거나 하는 등 필요에 따라 손쉽게 활용할 수 있다. fit의 파라미터들의 추정치과 p-값을 정리해서 보고 싶다면 다음과 같이 작업하면 된다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_format &amp;lt;- function(x){sprintf(&amp;quot;%0.3f&amp;quot;, x)}
my_model_gapminder %&amp;gt;% 
  mutate(fit = flatten(pmap(.l = list(.f = funcs, .formulas = models, data = dat), 
                            .f = modelr::fit_with))) %&amp;gt;% 
  .$fit %&amp;gt;% 
  map_dfr(tidy, .id = &amp;quot;models&amp;quot;) %&amp;gt;% 
  mutate_if(is.numeric, my_format) -&amp;gt; res1

res1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    models              term estimate std.error statistic p.value
## 1       1       (Intercept)   53.956     0.315   171.290   0.000
## 2       1         gdpPercap    0.001     0.000    29.658   0.000
## 3       2       (Intercept)    2.864     0.023   123.017   0.000
## 4       2    log(gdpPercap)    0.147     0.003    51.945   0.000
## 5       3       (Intercept)    3.196     0.051    63.247   0.000
## 6       3    log(gdpPercap)    0.109     0.006    17.608   0.000
## 7       4       (Intercept)    3.070     0.054    56.813   0.000
## 8       4    log(gdpPercap)    0.111     0.007    14.943   0.000
## 9       5       (Intercept)    3.062     0.026   117.692   0.000
## 10      5 continentAmericas    0.133     0.011    12.519   0.000
## 11      5     continentAsia    0.110     0.009    12.037   0.000
## 12      5   continentEurope    0.166     0.012    14.357   0.000
## 13      5  continentOceania    0.152     0.029     5.187   0.000
## 14      5    log(gdpPercap)    0.112     0.004    31.843   0.000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;broom&lt;/code&gt; 패키지의 &lt;code&gt;tidy&lt;/code&gt; 함수는 복잡한 개체들로 구성된 대상을 tibble로 손쉽게 정리해주는 역할을 한다.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lazy-application&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lazy application&lt;/h1&gt;
&lt;p&gt;간단한 응용으로 각 terms들의 신뢰구간을 뽑아보도록 하자. 일단, 95%의 신뢰구간은 아래와 같이 간단하게 생성할 수 있다. &lt;code&gt;confint&lt;/code&gt; 함수를 쓰면 되지만, 신뢰구간을 tibble로 만들어 주기 위해서 &lt;code&gt;broom&lt;/code&gt;패키지에 포함된 &lt;code&gt;confint_tidy&lt;/code&gt;를 쓰면 된다. 게으른 응용이므로 추가는 생략한다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_model_gapminder %&amp;gt;% 
  mutate(fit = flatten(pmap(.l = list(.f = funcs, .formulas = models, data = dat), 
                            .f = modelr::fit_with))) %&amp;gt;% 
  .$fit %&amp;gt;% 
  map_dfr(confint_tidy, .id = &amp;quot;models&amp;quot;) %&amp;gt;% 
  mutate_if(is.numeric, my_format) %&amp;gt;% 
  mutate(term = res1$term) %&amp;gt;% 
  select(models, term, everything())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    models              term conf.low conf.high
## 1       1       (Intercept)   53.338    54.573
## 2       1         gdpPercap    0.001     0.001
## 3       2       (Intercept)    2.819     2.910
## 4       2    log(gdpPercap)    0.141     0.152
## 5       3       (Intercept)    3.096     3.295
## 6       3    log(gdpPercap)    0.097     0.121
## 7       4       (Intercept)    2.964     3.176
## 8       4    log(gdpPercap)    0.096     0.125
## 9       5       (Intercept)    3.011     3.113
## 10      5 continentAmericas    0.112     0.154
## 11      5     continentAsia    0.092     0.128
## 12      5   continentEurope    0.143     0.189
## 13      5  continentOceania    0.095     0.210
## 14      5    log(gdpPercap)    0.105     0.119&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;tidy&lt;/code&gt; 명령어는 회귀분석 객체를 위에 보는 것처럼 tibble로 깔끔하게 정리한다. &lt;code&gt;broom&lt;/code&gt; 패키지는 모델의 분석 결과를 data.frame으로 가공해 활용도를 높이자는 취지를 갖고 있다. 보통 R의 경우 분석의 결과물들이 list의 복잡한 형태로 산출된다. R의 데이터 구조를 아주 잘 안다면 모를까, 그렇지 않은 사람들에게는 꽤 골치아픈 대목의 하나인데, &lt;code&gt;broom&lt;/code&gt;은 이러한 불편함을 해소한다. 말 그대로 빗자루의 역할을 하는 패키지다. &lt;a href=&#34;https://cran.r-project.org/web/packages/broom/vignettes/broom.html&#34;&gt;여기&lt;/a&gt;서 한번 둘러보기를 권한다.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to manage your personal project</title>
      <link>/post/2017/10/02/how-to-manage-your-personal-project/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/10/02/how-to-manage-your-personal-project/</guid>
      <description>&lt;div id=&#34;prologue&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;코딩을 잘하는 것도 아니고 많이 하는 것도 아니고 그래서 많이 아는 것도 아니다. 하지만, 그 별 것 아닌 일도 하게 될 때 가장 고민스러운 대목은 다음의 두가지다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;문제해결&lt;/li&gt;
&lt;li&gt;작업의 연속성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;아주 거대하고 어려운 문제가 아니라면 첫번째는 시간을 부으면 어떻게든 해결은 된다. 물론, 내 경우 능력이 부족해서 언제나 우아하게 해결되지 않은 경우가 많기는 하지만… 해결 이후 많이 하게 되는 고민은 일정 시간이 지니고 잊게 된다는 슬픈 사실이다. 해결의 열기와 집중은 시간이 지나면 가시기 마련이다. 한마디로 ’어제의 나’를 ’오늘의 나’로 온전히 데려오지 못하는 것이다. 정말로 어제-오늘 간격이라면 크게 걱정할 필요가 없고 일주일 정도도 괜찮을 것 같다. 하지만, 3개월이라면? 6개월이라면? 더 안 좋은 경우도 있다. 프로젝트/연구가 길어서 한달 정도 걸린다고 하자. 달 끝에 달 초에 한 것을 소환하고 싶다! 하지만 안타깝게도 잘 기억이 잘 나지 않을지 모른다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;-&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;문서화의 딜레마&lt;/h1&gt;
&lt;p&gt;이럴 때 필요한 것이 문서화다. 문서화 작업은 꼭 협업에만 필요한 것은 아니다. 혼자 일할 때도 문서화 는 필요하다. 오히려 더 절실히 필요할지도 모르겠다. 그런데, 문서화 작업은 일종의 ‘무한회귀’의 문제를 낳을 때가 있다. 아마도 스터디노트 같은 것은 만들어본 분이라면 정도의 차이는 있겠지만 비슷한 것을 느껴보았을 것이다. 어떤 코드/내용을 설명하기 위해 문서화를 했다고 하자. 그런데, 문서의 양과 종류가 많아지면서 이 문서에 대한 문서가 필요하게 된다. 이렇듯 많은 경우 ’메타’ 문서의 증식을 막기 쉽지 않고, 그 와중에 길을 잃기 십상이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;---&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;(개인적) 프로젝트 관리의 필요성&lt;/h1&gt;
&lt;p&gt;그래서 필요한 게 프로젝트 관리도구이다. 모두가 소통할 수 있는 방식으로 common knowledge를 정하고 이 틀 아래에서 작업하는 것이다. 어떤 프로젝트인지 조직의 성격이 어떤 것인지에 따라서 여러가지 선택지들이 있고, 이 문제는 여기서 다룰 문제는 아니 옆으로 치워두자. 일단 &lt;code&gt;R&lt;/code&gt;을 기반으로 프로젝트/연구를 한다고 가정하겠다. 필요한 요소가 무엇일까? 대충 생각나는대로 적어보자면,&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;수집한 원 데이터의 보관&lt;/li&gt;
&lt;li&gt;원 데이터의 정리(munging; 발음은 “먼징”이다. 동사의 발음은 “먼지”다!)&lt;/li&gt;
&lt;li&gt;2의 과정에서 동원된 코드의 보관 및 적절한 해설&lt;/li&gt;
&lt;li&gt;필요한 연구 주제를 탐구하기 위한 코드들 및 비주얼라이제이션 결과물들&lt;/li&gt;
&lt;li&gt;연구 주제에 필요한 참고 문헌&lt;/li&gt;
&lt;li&gt;최종 리포트&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;일단 이정도가 떠오른다. 이 정도의 내용들이 이력관리가 가능하면서 가급적 빠른 ’회상’이 가능하다면 좋을 것이다. 일단, 이력관리에 관한한 git을 뛰어넘은 도구가 없으니 이 대목은 넘어가도록 하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-projecttemplate&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Package &lt;code&gt;ProjectTemplate&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;나도 이런 요구를 어느 정도라도 만족시키는 툴 혹은 패키지가 있을까 싶었고 많이 찾았고 이것저것 많이 해보기도 했다. 최근에서야 아주 괜찮은 R 패키지를 만나게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://projecttemplate.net&#34;&gt;Project Template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 페키지를 (개인) 프로젝트 관리를 간단하고 비교적 완벽하게 지원한다. 패키지를 시작하는 흐름은 다음과 같다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;패키지 설치&lt;/li&gt;
&lt;li&gt;프로젝트 생성&lt;/li&gt;
&lt;li&gt;설치후 필요한 커스터마이즈&lt;/li&gt;
&lt;li&gt;패키지 로드 후 작업&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;패키지 설치는 통상적으로 아래와 같이 그냥 하면 된다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;ProjectTemplate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;라이브러리를 로드하고 이후 프로젝트 생성은 프로젝트가 떨어졌으면 하는 위치에 작업 폴더를 맞추고 아래의 명령을 실행한다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;#39;ProjectTemplate&amp;#39;)
create.project(&amp;#39;letters&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이후 letters라는 하위 폴더 안에 다음과 같은 구조의 폴더가 생성된다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://projecttemplate.net/directories.png&#34; /&gt;

&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;각 폴더의 역할에 대해서는 &lt;a href=&#34;http://projecttemplate.net/architecture.html&#34;&gt;여기&lt;/a&gt;를 참고하면 되겠다. 일단, 주요한 폴더에 대해서만 설명해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;: 프로젝트 설정을 다룬다. 예를 들어, 시작시 라이브러리를 로드할 것인지 등등을 세세하게 설정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache&lt;/code&gt;: 작업 과정에서 활용되는 중간재(데이터, 코드등) 중에서 미리 로드될 내용들을 넣는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge&lt;/code&gt;: 데이터 다루기에서 가장 중요한 데이터 정리 과정의 코드 및 문서를 넣는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대충 시험삼아 테스트 프로젝트를 시험해 해보았다. 아래와 같은 프로세스로 손쉽게 프로젝트를 생성하고 관리할 수 있었다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;를 적절하게 설정한다.&lt;/li&gt;
&lt;li&gt;원자료를 구해서 &lt;code&gt;data&lt;/code&gt; 폴더에 적절하게 박아 넣는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge&lt;/code&gt; 폴더에 데이터 정리 코드를 넣는다.&lt;/li&gt;
&lt;li&gt;정리된 중간 데이터 및 함수가 생성되면 &lt;code&gt;cache&lt;/code&gt;에 넣는다.&lt;/li&gt;
&lt;li&gt;아직 미숙한 연구 질문 따위를 &lt;code&gt;tests&lt;/code&gt;를 통해서 이렇게 저렇게 시험해본다.&lt;/li&gt;
&lt;li&gt;방향이 확실하게 정해지면 &lt;code&gt;src&lt;/code&gt;를 통해 코드 작업을 진행한다.&lt;/li&gt;
&lt;li&gt;코드가 안정화되고 완성되고 흥미로운 결과가 발견되면 &lt;code&gt;reports&lt;/code&gt;를 통해 작업한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 흐름으로 작업할 수 있겠다. 역시 상세한 내용은 앞서 링크한 프로젝트의 홈페이지를 읽어보시면 되겠다. 혹시 해당 구조가 너무 중후장대하다고 생각된다면, 패키지는 앞서의 구조보다 경파한 세팅도 지원한다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create.project(minimal = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 프로젝트를 생성하면, 아래와 같이 최소 폴더들만 생성된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;---&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;다른 대안 및 장점&lt;/h2&gt;
&lt;p&gt;사실 RStudio 안에는 프로젝트 생성 기능이 포함되어 있다. 그런데, 써본 분들은 알겠지만 다소 직관적이지 않고, RStudio가 반드시 필요하다. 반면, &lt;code&gt;ProjectTemplate&lt;/code&gt; 패키지는 의존성도 없을 뿐 아니라, 훨씬 더 직관적이고 직접적이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>안녕 R Markdown</title>
      <link>/post/2017/09/18/%EC%95%88%EB%85%95-r-markdown/</link>
      <pubDate>Mon, 18 Sep 2017 21:13:14 -0500</pubDate>
      
      <guid>/post/2017/09/18/%EC%95%88%EB%85%95-r-markdown/</guid>
      <description>&lt;p&gt;원래 문서는 Frida Gomam이 작성한, &lt;a href=&#34;https://knausb.github.io/2015/07/hello-r-markdown/&#34;&gt;Hello R Markdown&lt;/a&gt;이다. 여기서는 내 입맛에 맞게 문서를 고쳤으므로 저자를 바꾸었다.&lt;/p&gt;
&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;--&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;한글 장 제목&lt;/h1&gt;
&lt;p&gt;한글 장 제목도 잘 처리된다는 것을 위와 같이 알 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;-&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;수식 처리&lt;/h1&gt;
&lt;p&gt;rmd 문서에서는 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm\LaTeX\)&lt;/span&gt;을 쓸 수 있다. 이것이 아주 좋은 점이다. 게다가 rmarkdown은 header를 약간 손 보면, tex, beamer 기반의 pdf로 뽑아낼 수 있다. 여기에 약간 tricky하고 재미있는 대목이 있는데, 이건 다음에 기회가 되면 적어보도록 하겠다.&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[\begin{align}
Z^i_j = \sum_{k=1}^n (x_k + y_k) 
\end{align}\]&lt;/span&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Blog by Hogo</title>
      <link>/post/2017/09/19/blog-by-hogo/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/09/19/blog-by-hogo/</guid>
      <description>&lt;div id=&#34;prologue&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;어쨌든 자신만의 공간을 지니는 것은 로망이다. 이 로망을 웹에서 실현해본 사람들은 넷스케이프를 써보고, 웹에디터(나모 웹에디터?)를 통해 자신만의 홈페이지를 만들어본 경험이 있는 세대에 속할 것이다. 내용에 집중해야 한다는 것은 맞다. 네이버, 다음, 구글 등은 편리하게 글을 올리고 입소문을 태울 수 있고 관리가 편한 블로그의 틀을 이미 제공한다. 그렇다면, 왜 독자적인 공간을 만들어야 하는가?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;대기업이 싫어서&lt;/li&gt;
&lt;li&gt;서비스 주소가 마음에 안들어서&lt;/li&gt;
&lt;li&gt;디자인이나 형식이 과해서&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;뭐 이유야 여러가지가 있겠지만 직접 만드는 것에는 나름의 의의는 있겠다. 문제는 어떻게 만들 수 있느냐는 것이다. 통상적인 절차에 따르면 다음과 같을 것이다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;웹 호스팅 서비스를 탐색한다.&lt;/li&gt;
&lt;li&gt;웹 사이트 혹은 블로그를 운영할 기술적인 프레임웤을 선택한다.&lt;/li&gt;
&lt;li&gt;도메인 등속을 구입한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;돈이 든다는 것 이외에 위의 절차에는 따라붙은 귀찮음이 있다. 작든 크든 운영자가 된다는 것은 일정한 시간과 비용을 수반할 수 밖에 없다. 페이지 혹은 블로그를 제한적인 목적과 용도로 운영한다마녀, 이러한 비용은 배보다 배꼽이 더 큰 것일 수 있다. 이 문제를 해결할 수는 없을까?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;static-web&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Static Web&lt;/h1&gt;
&lt;p&gt;아래 그림으로 비교적 분명하게 설명이 되리라고 본다. Static Web은 기존에 만들어진 문서를 클라이언트로 뿌려주는 일만 한다. 반면, Dynamic web은 클라이언트의 요청을 세밀하게 분석해서 그에 맞게 문서를 제조해서 클라이언트로 뿌려준다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Scheme_static_page_en.svg/750px-Scheme_static_page_en.svg.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Static_web_page&#34;&gt;그림 출처&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Scheme_dynamic_page_en.svg/750px-Scheme_dynamic_page_en.svg.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_web_page&#34;&gt;그림 출처&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;당연히 웹의 발전이 정적웹에서 동적웹으로 갔을 것이라고 추론할 수 있다. 물론, 진보에는 댓가가 따르기 마련이다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;우선 서비스가 무거워진다. WordPress 같은 날렵한 서비스를 써도 서비스가 무거워진다. (그러다가 결국 큰 회사에서 호스팅하는 서비스로 옮겨간다)&lt;/li&gt;
&lt;li&gt;아무리 프레임웤을 잘 만든다고 해도 버그나 해킹에 취약하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 웹페이지의 경우에도 마찬가지만, 내 목적은 그냥 내가 하고 싶은 말을 몇마디 적고 공유하는 것이다. SQL 같은 거 붙이거나 관리하는 거 몹시 부답스럽다. 독자들로부터의 피드백, 이런 거 필요 없다. 그럴 때 정적웹이 딱인 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio-blogdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;RStudio &amp;amp; Blogdown&lt;/h1&gt;
&lt;p&gt;html을 생짜로 코딩할게 아니라면, 이 대목의 문제는 에디터를 택하는 문제다. 여기서 에디터라 함은, 최대한 자연어에 가깝게 내용을 작성하고 이걸 html로 바꿔주는 그런 녀석을 의미할 것이다. 다행히 최근 등장한 마크업 언어 Markdown은 이 문제에 대한 거의 완벽한 해결책이다. 최소한의 스크립팅으로 최대한의 효과를 거둬준다. Rmarkdown은 일반 Markdown과 호환되면서 R에 특화된 내용을 갖고 있다. 당연히 RStudio에서 지원하는 포맷이므로 RStudio에서 쉽게 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;그리고 Blogdown은 RStudio를 기반으로 하는 R 패키지다. 정적웹의 꼴을 만들어주는 역할을 한다고 보시면 쉽다. 로컬에 일단 꼴을 설치하고 집을 툭닥툭닥 짓는다고 비유하면 적당하겠다. RStudio의 &lt;a href=&#34;https://blog.rstudio.com/2017/09/11/announcing-blogdown/&#34;&gt;공식 제품&lt;/a&gt;의 하나로 편입되었다. 패키지 설치 후에 명령어로 쉽게 공간들을 생성할 수 있다. 그리고 또하나의 장점이라면 Hugo의 &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;다양한 테마&lt;/a&gt;들을 손쉽게 끌어다 붙일 수 있다. 패키지 제작자 Yihui Xie가 아주 상세한 &lt;a href=&#34;https://bookdown.org/yihui/blogdown/installation.html&#34;&gt;설치가이드&lt;/a&gt; 또한 제공하고 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;github-and-its-kind&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;GitHub, and its kind&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com&#34;&gt;github&lt;/a&gt;와 git에 대해서는 굳이 말할 필요가 없을 듯 하다. 혹자는 리누스 토발즈의 최대 업적이 리눅스가 아니라 git 시스템이라고 할 정도이니 말이다. 좌간, 스태틱웹을 구현하는 데 있어 github는 일종의 숙주다. git은 원래와 같은 리포티터리 관리 및 협업용으로 쓰는게 아니라 스태틱웹의 내용을 저장해놓는 창고로 쓴다. 뭐 그러면 어떠랴.&lt;/p&gt;
&lt;p&gt;대략적인 작업의 흐름은 아래와 같다. github를 기준으로 서술하지만, 나머지 git 관련 사이트도 대동소이하리라고 본다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;github 계정을 만든다. public으로 만든다.&lt;/li&gt;
&lt;li&gt;계정을 만들 때, &lt;code&gt;README.md&lt;/code&gt; 파일을 포함해서 만들지 않으면 화면 위에 로컬의 폴더를 어떻게 git의 관할 하에 놓는지에 대한 가이드가 뜬다. 그대로 하면 된다. 대충 아래와 같이 생겼다.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;echo &amp;quot;# YOUR_GIT_REPO&amp;quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin https://github.com/YOUR_GIT_ACCOUNT/YOUR_GIT_REPO.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;이렇게 세팅을 한 후에 이제 github와 로컬의 내용을 동기화해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git add . 
git commit -m &amp;quot;YOUR_MESSEAGE&amp;quot;
git push &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기까지 마치면 git의 &lt;code&gt;YOUR_GIT_REPO&lt;/code&gt;로 로컬의 내용이 올라가게 된다. 여기까지 마치면 스태틱웹 제공을 위한 온라인의 숙주가 마련된 셈이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;netlify.com&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Netlify.com&lt;/h1&gt;
&lt;p&gt;숙주가 마련되었지만, 바로 hmtl을 클라이언트로 쏴주는 것은 아니다. github가 이걸 막고 있기 때문인데, 이 때문에 약간 배치(deploy) 과정이 필요하다. Xie는 &lt;a href=&#34;https://bookdown.org/yihui/blogdown/netlify.html&#34;&gt;세가지 정도의 옵션&lt;/a&gt; 제시하고 있으나, 그냥 닥치고 &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify.com&lt;/a&gt;을 쓰는 편이 좋다. 이 서비스가 문을 닫았다면, 모를까 그게 아니라면 다른 서비스보다 이 용도로는 훨씬 편리하다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;계정 만들고 자신의 온라인 git repo와 연결한다.&lt;/li&gt;
&lt;li&gt;나머지 설정은 아래 스크린 샷에 나온 것처럼 한다.&lt;/li&gt;
&lt;li&gt;주의할 것은 Hugo 버전 세팅이다. 테마마다 필요로 하는 휴고 버전이 다르니까 주의해서 설정하라.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://bookdown.org/yihui/blogdown/images/netlify-settings.png&#34; width=&#34;600&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;이제 Netlify에서 전개과정을 끝내면 직접 잘 서비스가 되고 있는지 확인해볼 수 있다. 주소의 앞단도 바꿀 수 있으니 이건 마음대로 알아서 하시라.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;--&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;그림 하나로 요약!&lt;/h1&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://apreshill.rbind.io/img/posts/2017-06-12-up-and-running-with-blogdown/blogdown-signpost-4.png&#34; width=&#34;600&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;나의 설명이 부족하거나 이해가 되지 않는 분은 &lt;a href=&#34;https://apreshill.rbind.io/post/up-and-running-with-blogdown/&#34;&gt;여기&lt;/a&gt;를 참고하실 수 있다.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Talk</title>
      <link>/note/2017/09/19/data-talk/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/note/2017/09/19/data-talk/</guid>
      <description>&lt;div id=&#34;prologue&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;개인적이든 직업적인 이유든 데이터를 볼 일이 많습니다. 인상적으로 본 데이터를 소개하는 꼭지를 한번 만들어 봅니다. 제가 여기저기서 본 것들을 가져옵니다. 독창성 같은 건 기대하지 마시기를… 아울러 업데이트도 기분 내킬 때!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alchol-vs-suicide&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Alchol vs Suicide&lt;/h1&gt;
&lt;p&gt;인과관계는 아니니까, 그렇구나 하고 말지요.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://i.redd.it/15ps6g0lupmz.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;how-death-has-changed-over-100-years-in-britain&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How death has changed over 100 years in Britain&lt;/h1&gt;
&lt;p&gt;엄청난 비주얼라이제이션입니다. 일종의 동영상이라고 할 수 있을텐데, 공중보건의 주요한 사건과 죽음의 양상을 잘 이야기해주고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.theguardian.com/lifeandstyle/ng-interactive/2017/sep/18/how-death-has-changed-over-100-years-in-britain&#34;&gt;Guardian&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;years-of-economic-history-in-one-chart&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2,000 Years of Economic History in One Chart&lt;/h1&gt;
&lt;p&gt;혹자의 이야기처럼, 중국은 “열강”이 아닌 적이 별로 없었던 나라입니다. 요즘이 정상으로 돌아오고 있는 국면일 수도 있겠지요.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://2oqz471sa19h3vbwa53m33yj.wpengine.netdna-cdn.com/wp-content/uploads/2017/09/share-of-gdp-history1070.jpg&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://www.visualcapitalist.com/2000-years-economic-history-one-chart&#34;&gt;Visual Capitalist&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;google-public-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Google Public Data&lt;/h1&gt;
&lt;p&gt;아직은 World Bank 데이터 밖에 없는 것 같습니다만, 구글이 하는 일이니 소리소문 없이 좋아지리라 생각합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/publicdata/explore?ds=d5bncppjof8f9_&amp;amp;met_y=sp_pop_totl&amp;amp;hl=en&amp;amp;dl=en&#34;&gt;Google Public Data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;baltimore-neighborhood-health&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Baltimore Neighborhood Health&lt;/h1&gt;
&lt;p&gt;훌륭합니다! 제가 볼티모어 거주자가 아니라서 보는 감상의 깊이가 다릅니다. 한국 도시들도 이런 거 만들어주세요!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://data.baltimoresun.com/news/neighborhood-health/&#34;&gt;Baltimore Sun&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rise-of-streaming&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rise of Streaming&lt;/h1&gt;
&lt;p&gt;올해 에미상에서 “Handmaid’s Tale”의 작품상 수상이 화제입니다. 에미 후보작들의 변화는 가정용 엔터테인먼트의 변화를 잘 보여줍니다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://i.redd.it/8fu135v7comz.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>