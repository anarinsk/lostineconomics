<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r-package on lost in economics</title>
    <link>/tags/r-package/index.xml</link>
    <description>Recent content in r-package on lost in economics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/r-package/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to manage your personal project</title>
      <link>/post/2017/10/02/how-to-manage-your-personal-project/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/10/02/how-to-manage-your-personal-project/</guid>
      <description>&lt;div id=&#34;prologue&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;코딩을 잘하는 것도 아니고 많이 하는 것도 아니고 많이 아는 것도 아니다. 하지만, 그 별 것 아닌 일도 하게 될 때 가장 고민스러운 대목은&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;문제해결&lt;/li&gt;
&lt;li&gt;작업의 연속성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;두가지가 아닐까 한다. 아주 거대하고 어려운 문제가 아니라면 첫번째는 시간을 부으면 어떻게든 대충 해결한다(물론, 내 경우 능력이 부족해서 언제나 우아하게 해결된다는 것은 아니다). 내 경우 많이 하게 되는 고민은 첫번째를 하고는 대개는 잊게 된다는 것이다. 해결의 열기와 집중은 시간이 지나면 가시기 마련이다. 한마디로 ’어제의 나’를 ’오늘의 나’로 온전히 데려오지 못하는 것이다. 정말로 어제-오늘 간격이라면 크게 걱정할 필요가 없고 일주일 정도도 괜찮을 것 같다. 하지만, 3개월이라면? 6개월이라면? 더 안 좋은 경우도 있다. 프로젝트/연구가 길어서 한달 정도 걸린다고 하자. 달 끝에 달 초에 한 것을 소환한다. 기억이 잘 나지 않을 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;-&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;문서화의 딜레마&lt;/h1&gt;
&lt;p&gt;이럴 때 필요한 것이 문서화 작업이다. 문서화 작업은 꼭 협업에만 필요한 것은 아니다! 혼자 일할 때도 문서화 작업은 필요하다. 오히려 더 절실할 수도 있다. 그런데, 문서화 작업은 일종의 ’무한회귀’의 문제를 낳을 때가 있다. 아마도 스터디 노트 같은 것은 만들어본 분이라면 정도의 차이는 있겠지만 비슷한 것은 느껴보았을 것이다. 어떤 코드/내용을 설명하기 위해 문서화를 했다고 하자. 그런데, 문서의 양과 질이 많아지면서, 이 문서에 대한 문서가 필요하게 된다. 메타 문서의 증식을 막기 쉽지 않다. 그 와중에 길을 잃게 십상이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;---&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;(개인적) 프로젝트 관리의 필요성&lt;/h1&gt;
&lt;p&gt;그래서 필요한 게 일종의 프로젝트 관리의 툴이다. 모두가 소통할 수 있는 방식으로 common knowledge를 틀잡는 것이다. 어떤 프로젝트인지 조직의 성격이 어떤 것인지에 따라서 여러가지 선택지들이 있고, 여기서 다룰 문제는 아니다. 개인적으로 R을 기반으로 프로젝트/연구를 한다고 생각해보자. 필요한 요소가 무엇일까? 대충 생각나는대로 적어보자면,&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;수집한 데이터의 보관&lt;/li&gt;
&lt;li&gt;데이터 정리(munging; 발음은 “먼징”이다. 동시의 발음은 “먼지”다!)&lt;/li&gt;
&lt;li&gt;2의 과정에서 동원된 코드의 보관 및 해설&lt;/li&gt;
&lt;li&gt;필요한 연구 주제를 탐구하기 위한 코드들 및 비주얼라이제이션&lt;/li&gt;
&lt;li&gt;연구 주제에 필요한 참고 문헌&lt;/li&gt;
&lt;li&gt;최종 리포트&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;일단 이정도가 떠오른다. 이 정도의 내용들이 이력관리가 가능하면서 가급적 빠른 ’회상’이 가능하다면 좋을 것이다. 일단, 이력관리에 관한한 git을 뛰어넘은 도구가 없으니 이 대목은 넘어가도록 하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-projecttemplate&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Package &lt;code&gt;ProjectTemplate&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;나도 이런 요구를 어느 정도라도 만족시키는 툴 혹은 패키지가 있을까 싶었고 많이 찾았고 이것저것 많이 해봤다. 최근에서야 아주 괜찮은 R 패키지를 만나게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://projecttemplate.net&#34;&gt;Project Template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 페키지를 개인 프로젝트 관리를 완벽하게 지원한다. 대략적인 작업의 흐름은 다음과 같다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;패키지 설치&lt;/li&gt;
&lt;li&gt;프로젝트 생성&lt;/li&gt;
&lt;li&gt;설치후 필요한 커스터마이즈&lt;/li&gt;
&lt;li&gt;패키지 로드 후 작업&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;패키지 설치는 통상적으로 아래와 같이 그냥 하면 된다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;ProjectTemplate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;라이브러리를 로드하고 이후 프로젝트 생성은 프로젝트가 떨어졌으면 하는 위치에 작업 폴더를 맞추고 아래의 명령을 실행한다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;#39;ProjectTemplate&amp;#39;)
create.project(&amp;#39;letters&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이후 letters라는 하위 폴더 안에 다음과 같은 구조의 폴더가 생성된다.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://projecttemplate.net/directories.png&#34; /&gt;

&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;각 폴더의 역할에 대해서는 &lt;a href=&#34;http://projecttemplate.net/architecture.html&#34;&gt;여기&lt;/a&gt;를 참고하면 되겠다. 일단, 주요한 폴더에 대해서만 설명해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;: 프로젝트 설정을 다룬다. 예를 들어, 시작시 라이브러리를 로드할 것인지 등등을 세세하게 설정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cache&lt;/code&gt;: 작업 과정에서 활용되는 중간재(데이터, 코드등) 중에서 미리 로드될 내용들을 넣는다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;munge&lt;/code&gt;: 데이터 다루기에서 가장 중요한 데이터 정리 과정의 코드 및 문서를 넣는다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대충 시험삼아 테스트 프로젝트를 시험해 해보았다. 아래와 같은 프로세스로 손쉽게 프로젝트를 생성하고 관리할 수 있었다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;를 적절하게 설정한다.&lt;/li&gt;
&lt;li&gt;원자료를 구해서 &lt;code&gt;data&lt;/code&gt; 폴더에 적절하게 박아 넣는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge&lt;/code&gt; 폴더에 데이터 정리 코드를 넣는다.&lt;/li&gt;
&lt;li&gt;정리된 중간 데이터 및 함수가 생성되면 &lt;code&gt;cache&lt;/code&gt;에 넣는다.&lt;/li&gt;
&lt;li&gt;아직 미숙한 연구 질문 따위를 &lt;code&gt;tests&lt;/code&gt;를 통해서 이렇게 저렇게 시험해본다.&lt;/li&gt;
&lt;li&gt;방향이 확실하게 정해지면 &lt;code&gt;src&lt;/code&gt;를 통해 코드 작업을 진행한다.&lt;/li&gt;
&lt;li&gt;코드가 안정화되고 완성되고 흥미로운 결과가 발견되면 &lt;code&gt;reports&lt;/code&gt;를 통해 작업한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 흐름으로 작업할 수 있겠다. 역시 상세한 내용은 앞서 링크한 프로젝트의 홈페이지를 읽어보시면 되겠다. 혹시 해당 구조가 너무 중후장대하다고 생각된다면, 패키지는 보다 경파한 세팅도 지원한다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create.project(minimal = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 프로젝트를 생성하면, 아래와 같이 최소 폴더들만 생성된다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;cache/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;---&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;다른 대안 및 장점&lt;/h2&gt;
&lt;p&gt;사실 RStudio 안에는 프로젝트 생성 기능이 포함되어 있다. 그런데, 써본 분들은 알겠지만 다소 직관적이지 않고, RStudio가 반드시 필요하다. 반면, &lt;code&gt;ProjectTemplate&lt;/code&gt; 패키지는 의존성도 없을 뿐 아니라, 훨씬 더 직관적이고 직접적이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>